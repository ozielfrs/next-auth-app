// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                       String?
  email                      String?                     @unique
  emailVerified              DateTime?
  image                      String?
  password                   String?
  role                       UserRole                    @default(USER)
  accounts                   Account[]
  EmailVerificationToken     EmailVerificationToken?
  PasswordVerificationToken  PasswordVerificationToken?
  enabled2FA                 Boolean                     @default(false)
  TwoFactorVerificationToken TwoFactorVerificationToken?
}

model EmailVerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId

  @@unique([token, userId])
}

model PasswordVerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId

  @@unique([token, userId])
}

model TwoFactorVerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  status    Boolean  @default(false)
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId

  @@unique([id, userId])
}
